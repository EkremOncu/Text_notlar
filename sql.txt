Server name -> . / localhost / (LOCAL) / Makina adı (EkremPC) / Bağlanılacak pc'nin IP adreside yazılabilir (192.168.1.8),  her makinenin yerel IP'si vardır o da (127.0.0.1)

sa -> system administrator

SSMS -> Sql Sever Managament Studio
SSRS -> Sql Sever Reporting Services
SSIS -> Sql Sever Integration Services
SSAS -> Sql Sever Analysis Services

# ---------- Data Type ----------------
- bigint 		-> tam 8 byte uzunluğundaki int degerler, çok büyük sayısal değerler için
- int			-> +2 milyar -2 milyar arası değer alır
- smallint		-> +32 bin -32 bin arasında değer tutar
- tinyint		-> 0 ile 255 arasında değer alır

- binary(50)		-> binary veriler icin kullanılır, True ve False alır
- bit			-> binary veriler icin kullanılır, True ve False alır, örn: medeni durum, reşit olma 
- timestamp		-> kayıtların güncellemelerini tutuyor 

- char(10)		-> karakterler için kullanılır, 10 karekterlik yer tutuyor
- nchar			-> n harfi Latince alfabesi hariç diğer alfabeleri de desteklediği anlamına geliyor. Örn: Arap,Japon alfebeleri
- nvarchar(50)		-> bellekte 50 karekterlik yer tutar ama ben ne kadar kullanıyorsam onu tutar gerisini tutmaz. Performans için

- date			-> sadece gün ay yıl tutar
- datetime		-> gün ay yıl saat dakika tutar

- money			-> +922 milyar -922 milyar arası para birimi tutar
- smallmoney		-> +200 milyon -200 milyon arası para birimi tutar




# -------------------------------------------- SQL Komutları ------------------------------------------------------------------

USE [Database adı] -> Hangi Veritabanını kullanacağını seçer 

--------------- Veritabanı Manipülasyon Komutları -----------------

. Create -> Bir veritabanı nesnesini oluşturur  -> CREATE INDEX (Index oluşturur) 
	
. Alter  -> Bir veritabanı nesnesinin özelliğini değiştirir -> ALTER TABLE (Bir tablonun özelliğini değiştirir)

. Drop   -> Bir veritabanı nesnesini siler -> DROP INDEX (Index'i siler) 

------------- Data Manipülasyon Komutları -----------------	       

. Select	. Insert	. Update

. Delete	. Truncate


. Select   -> Veritabanındaki tablolardan kayıtları çeker	

SELECT           -> SELECT * yazarsam tüm kolonlar gelir
[KOLON1, KOLON2]
FROM [TabloAdı]
WHERE «ŞARTLAR»



. Insert   -> Tabloya yeni kayıt ekler	

INSERT INTO [TabloAdı]
(Kolon1,Kolon2,Kolon3)
VALUES
(Deger1,Deger2,Deger3)



. Update   -> Bir tablodaki 1 ya da daha fazla alanını günceller, değiştirir 	

UPDATE [TabloAdi]
SET [Column1=Value1, Column2=Value2....]
WHERE «ŞARTLAR»



. Delete   -> Bir tablodan kayıt siler, 2000 veri vardı diyelim DELETE ile tüm tabloyu sildik, daha sonra veri ekledik, ID 2001'den başlar 		

DELETE
FROM [Tabloadı]
WHERE «ŞARTLAR»



. Truncate -> Tablonun içini boşaltır, DELETE'den farkı ID 1'den baslar	

TRUNCATE TABLE (TabloAdı)




--------------------- WHERE Şartı -----------------------------

SELECT
[Kolon1,Kolon2,Kolon3........]  
FROM [TabloAdı]
WHERE «ŞARTLAR»


=			Eşittir

<>			Eşit değildir

>			Büyüktür

<			Küçüktür

>=			Büyüktür ya da eşittir

<=			Küçüktür ya da eşittir		-> WHERE BirtDate <= '2000-03-27'

BETWEEN	->		Arasındadır			->  AGE BEETWEEN 20(dahil) AND 30(dahil)

LIKE 	  ->		İle başlar, İle biter, İçerir	-> WHERE CustomerName LIKE 'Ömer%', LIKE '%Ömer', LIKE '%Ömer%'

IN	  -> 		İçindedir			-> WHERE City IN ('LA','New York','Dallas')

NOT LIKE  ->		İle başlamaz, İle bitmez, İçermez

NOT IN	  ->		İçinde değildir



# ---------------- Distinct Komutu --------------------

- Tekrar eden satırları tekilleştirme amacıyla kullanılan bir komut.

SELECT DISTINCT
[kolon1,kolon2,kolon3]
FROM [Tabloadı]
WHERE «ŞARTLAR»

SELECT DISTINCT [CİTY,DISTRICT]
FROM [CUSTOMERS]			-> CUSTOMERS tablosundaki İstanbul'da kaç farklı district(ilçe) olduğunu görebiliriz
WHERE [CİTY=' İSTANBUL']



# ---------------- Orderby Komutu --------------------
- Sıralama Komutu
SELECT
[kolon1,kolon2,kolon3]  -> Kolon adı yerine direkt 1 , 2 , 3 yazabiliriz -> 1. , 2. , 3. kolonu cagır anlamına geliyor (SELECT* olmalı)
FROM [Tabloadı]
WHERE «ŞARTLAR»
ORDER BY [kolon1 ASC, kolon2 DESC]    -> ASC( A'dan Z'ye veya kücükten büyüğe sıralama), DSC( büyükten kücüğe sıralama)
	[City DSC, Age ASC] -> önce City'e göre DSC sıralıyor, Aynı City varsa Age'i kücük olana göre(ASC) sıralıyor



# ---------------- Top Komutu --------------------

- Veri setinde dönen kayıtların bir kısmını görmek için kullanılır

SELECT TOP [N sayısı] 	 /   SELECT TOP [N sayısı] PERCENT *									
[kolon1,kolon2,kolon3]       FROM [Tabloadı]
FROM [Tabloadı]
WHERE «ŞARTLAR»



# ---------------- Groupby Komutu --------------------


- DISTINCT fonksiyonun alternatifi olarak kullanılabilir
- Tekrar edenleri getirmez
- AGGREGATE_FUNCTIONS ile kullanılır.	

SELECT
[kolon1],
SUM([Price]), COUNT([Price]), AVG([Price]), MAX([Price]), MIN([Price])  # Price -> TabloAdi tablosundaki bir sütün	
FROM [TabloAdi] 
GROUP BY [kolon1, kolon2]

# EXAMPLE ----

SELECT
CITY,

MIN(PRICE) AS MinPrice, MAX(PRICE) AS MaxPrice,  AVG(PRICE) AS OrtalamaPrice,  COUNT(PRICE) AS Row_Count,  SUM(PRICE) AS TotalPrice      -> Yeni kolonları adlandırmış olduk

FROM SALES 

GROUP BY CITY

ORDER BY SUM(PRICE)


- HAVING komutu -> SQL sorgularında gruplama yapıldıktan sonra gruplar üzerinde koşulları kontrol etmek için kullanılır. HAVING komutu, GROUP BY ifadesiyle birlikte kullanılır ve gruplar üzerinde filtreleme yapmak için kullanılır.

SELECT [Country], COUNT(*) AS Total
FROM [Customers]
GROUP BY [Country]
HAVING COUNT(*) > 5;

Yukarıdaki örnekte, Customers tablosundaki müşterileri ülkelerine göre gruplayarak her bir ülkenin müşteri sayısını hesaplarız. Ardından, 
HAVING komutu ile müşteri sayısı 5'ten büyük olan grupları filtreleyerek sonucu döndürürüz.


SELECT column1, column2, ...
FROM table
WHERE conditions
GROUP BY column1, column2, ...
HAVING conditions;

Not: HAVING komutunu kullanırken dikkat etmeniz gereken nokta, HAVING koşullarının gruplama sonuçlarına uygulanmasıdır, 
bu yüzden HAVING ifadesinde gruplama sonuçlarına dayalı bir filtreleme yapmanız gerekmektedir.



#------------------------------------------------ SQL Sever Fonksiyonları ---------------------------------------------------

- DATEDIFF (YEAR, ['1984-12-30'], GETDATE() ) as dift		-> 2 Tarih arasındaki yıl farkını hesaplar, yaş hesaplama 	



- AGGREGATE_FUNCTIONS

SELECT
SUM([Price]), COUNT([Price]), AVG([Price]), MAX([Price]), MIN([Price])
FROM [TabloAdi] 

SUM([Price]) -> Toplam ne kadar ciro yaptığımı hesaplarım
MIN([Price]) -> Bir ürünü en ucuz kaca sattım 		   MAX([Price]) -> max kaca sattım 
AVG([Price]) -> Bir ürünü ortalama hangi fiyattan sattım 
COUNT([Price]) -> Kaç satırlık işlem gerçekleşti, kaç tane müşteri kaç tane barkot okutturdu
COUNT(DISTINCT [Price]) -> Tekrar edenleri almıyor


- Convert ()  -> Herhangi bir veri tipini alıp başka bir veri tipine dönüştürüyor

CONVERT (DATE, [Date_]) -> Date_ kolonunun veri tipini DATE veri tipine dönüştürdü (Yıl-Ay-Gün)
UPDATE [TabloAdı] SET [Date2]= CONVERT (DATE, [Date_]) -> TabloAdı tablosundaki Date2 sütünunu değiştirdi.





#-------------------------------------------- İlişkisel Veri Tabanı Kavramı ---------------------------------------------------

- Composite key  -> Bir tablodaki bir veya daha fazla sütunun birleşimini kullanarak bir satırı benzersiz olarak tanımlayan bir anahtar türüdür. Birleşik anahtarlar tek bir sütunun yetersiz olduğu durumlarda kullanılır. 
* Many-to-many ilişki  -> Bir veritabanı modelinde iki tablo arasındaki ilişkiyi ifade eden bir terimdir. Bu ilişki, birincil tablodaki bir kaydın ikincil tablodaki bir veya daha fazla kayıtla ilişkilendirilebileceği durumlarda kullanılır.

- Foreign key
* One-to-many ilişki


#-------------------------------------------- 2 Tabloyu Birleştirme ---------------------------------------------------
SELECT [u.*, a.Addresstext]				        SELECT [Users.*],[Address.Addresstext]
										
FROM								FROM
Users u, Adress a  	-> Kısaltma				[Users],[Adress]   -> Tablo adları

WHERE u.ID = a.UserID  AND  u.ID = 4		   		WHERE Users.ID = Address.UserID  AND  Users.ID = 4


#-------------------------------------------- 2'den fazla Tabloyu Birleştirme ---------------------------------------------------

SELECT [Users.*],[Address.Addresstext],[Countries.Country],[Cities.City]  
								-> Countries (Tablo) , Country (Countries tablosunundan bir kolon)
										
FROM
[Users], [Adress], [Countries], [Cities]   -> Tablo adları

WHERE Users.ID = Address.UserID  AND  Users.ID = 4 AND Cities.ID = Countries.ID 



#-------------------------------------------- JOIN ---------------------------------------------------
- LEFT JOIN		- FULL JOIN
- RIGHT JOIN		- INNER JOIN (JOIN)


SELECT
A.Kolon1, A.Kolon2, B.Kolon3, B.Kolon4
						
FROM 
Tablo1 A  

JOIN  Tablo2 B  ON  A.PK_Kolon = B.FK_Kolon		(PK -> Primary Key	FK -> Foreign Key)











